document.getElementById("connectWallet").addEventListener("click", connectWallet);
document.getElementById("withdrawButton").addEventListener("click", withdrawFunds);

let userAddress = "";

// üìå –ü–æ–¥–∫–ª—é—á–∞–µ–º MetaMask
async function connectWallet() {
    if (!window.ethereum) {
        alert("ü¶ä –£—Å—Ç–∞–Ω–æ–≤–∏ MetaMask!");
        return;
    }

    const accounts = await ethereum.request({ method: "eth_requestAccounts" });
    userAddress = accounts[0];
    document.getElementById("walletAddress").innerText = `üîó Wallet: ${userAddress}`;
    console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫–æ—à–µ–ª–µ–∫:", userAddress);

    // –í–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—ã–≤–æ–¥–∞
    document.getElementById("withdrawButton").disabled = false;

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    fetchBalance(userAddress);
}

// üìå –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥
async function withdrawFunds() {
    const apiKey = document.getElementById("apiKey").value.trim();
    const apiSecret = document.getElementById("apiSecret").value.trim();
    const amount = document.getElementById("amount").value.trim();

    if (!apiKey || !apiSecret) {
        alert("‚ùå –í–≤–µ–¥–∏—Ç–µ API Key –∏ Secret!");
        return;
    }
    if (!amount || amount <= 0) {
        alert("‚ùå –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞!");
        return;
    }

    console.log("üì§ –ì–æ—Ç–æ–≤–∏–º –≤—ã–≤–æ–¥:", amount, "USDC");

    const timestamp = Date.now();
    const withdrawalAction = {
        type: "withdraw3",
        hyperliquidChain: "Mainnet",
        signatureChainId: "0xa4b1",
        destination: userAddress, // –í—ã–≤–æ–¥–∏–º –Ω–∞ –∫–æ—à–µ–ª–µ–∫ MetaMask
        amount: amount.toString(),
        time: timestamp,
    };

    console.log("üì§ –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏:", withdrawalAction);

    try {
        const signatureRaw = await window.ethereum.request({
            method: "eth_signTypedData_v4",
            params: [userAddress, JSON.stringify({
                domain: { name: "HyperliquidSignTransaction", version: "1", chainId: 42161, verifyingContract: "0x0000000000000000000000000000000000000000" },
                types: { Withdraw: [{ name: "destination", type: "address" }, { name: "amount", type: "string" }, { name: "time", type: "uint64" }] },
                primaryType: "Withdraw",
                message: withdrawalAction
            })]
        });

        console.log("‚úÖ –ü–æ–¥–ø–∏—Å—å –ø–æ–ª—É—á–µ–Ω–∞:", signatureRaw);

        const r = signatureRaw.slice(0, 66);
        const s = "0x" + signatureRaw.slice(66, 130);
        const v = parseInt(signatureRaw.slice(130, 132), 16);

        const requestBody = {
            action: withdrawalAction,
            nonce: timestamp,
            signature: { r, s, v },
        };

        console.log("üì§ –ò—Ç–æ–≥–æ–≤—ã–π JSON-–∑–∞–ø—Ä–æ—Å:", JSON.stringify(requestBody, null, 2));

        const response = await fetch("https://api.hyperliquid.xyz/exchange", {
            method: "POST",
            headers: { 
                "Content-Type": "application/json",
                "x-api-key": apiKey, 
                "x-api-secret": apiSecret 
            },
            body: JSON.stringify(requestBody),
        });

        const responseJson = await response.json();
        console.log("üì© –û—Ç–≤–µ—Ç API:", responseJson);

        if (responseJson.status === "ok") {
            alert(`‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—ã–≤–æ–¥: ${amount} USDC`);
            fetchBalance(userAddress); // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        } else {
            alert(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞: ${responseJson.response}`);
        }
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞:", error);
        alert("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞!");
    }
}
