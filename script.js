document.addEventListener("DOMContentLoaded", async () => {
    const connectWalletButton = document.getElementById("connectWallet");
    const withdrawButton = document.getElementById("withdrawButton");
    const status = document.getElementById("status");
    const walletAddressField = document.getElementById("walletAddress");
    let userAddress = null;

    const API_URL = "https://api.hyperliquid.xyz/exchange"; // Hyperliquid API

    if (typeof window.ethereum !== "undefined") {
        console.log("‚úÖ MetaMask detected");
        window.web3 = new Web3(window.ethereum);
    } else {
        console.error("‚ùå MetaMask not detected");
        status.innerText = "‚ùå MetaMask not detected. Please install it.";
        return;
    }

    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ MetaMask
    connectWalletButton.addEventListener("click", async () => {
        try {
            const accounts = await window.ethereum.request({ method: "eth_requestAccounts" });
            userAddress = accounts[0];
            walletAddressField.innerText = `Wallet: ${userAddress}`;
            withdrawButton.disabled = false;
            console.log("‚úÖ Wallet connected:", userAddress);
        } catch (error) {
            console.error("‚ùå Wallet connection failed:", error);
            status.innerText = "‚ùå Failed to connect wallet.";
        }
    });

    withdrawButton.addEventListener("click", async () => {
        if (!userAddress) {
            status.innerText = "‚ùå Please connect wallet first!";
            return;
        }

        const apiKey = document.getElementById("apiKey").value;
        const apiSecret = document.getElementById("apiSecret").value;
        const amount = document.getElementById("amount").value;

        if (!apiKey || !apiSecret || !amount || amount <= 0) {
            status.innerText = "‚ùå Enter API Key, Secret, and a valid Amount!";
            return;
        }

        try {
            // –§–æ—Ä–º–∏—Ä—É–µ–º JSON, –ø–æ—Ö–æ–∂–∏–π –Ω–∞ CCXT
            const withdrawData = {
                type: "withdraw", // ‚úÖ –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏, –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ CCXT
                user: userAddress, // ‚úÖ –ê–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                delta: {
                    type: "accountClassTransfer",
                    usdc: amount.toString(), // ‚úÖ –°—É–º–º–∞ –≤ USDC
                    toPerp: false // ‚úÖ –ù–µ –ø–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ Perp
                },
                time: Date.now()
            };

            console.log("üì§ –ó–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π:", JSON.stringify(withdrawData, null, 2));

            // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ MetaMask (EIP-712)
            const signature = await window.ethereum.request({
                method: "eth_signTypedData_v4",
                params: [userAddress, JSON.stringify(withdrawData)]
            });

            console.log("‚úÖ –ü–æ–¥–ø–∏—Å—å –ø–æ–ª—É—á–µ–Ω–∞:", signature);

            // –°–æ–∑–¥–∞—ë–º JSON-–∑–∞–ø—Ä–æ—Å, –∫–∞–∫ –≤ CCXT
            const requestBody = {
                type: "withdraw",
                message: withdrawData,
                signature: signature
            };

        

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Hyperliquid API
            const response = await fetch(API_URL, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "api-key": apiKey,
                    "api-secret": apiSecret
                },
                body: JSON.stringify(requestBody)
            });

            const responseText = await response.text();
            try {
                const responseData = JSON.parse(responseText);
                console.log("üì© –û—Ç–≤–µ—Ç –æ—Ç API:", responseData);
                if (response.ok) {
                    status.innerText = "‚úÖ Withdraw successful!";
                } else {
                    status.innerText = `‚ùå Error: ${responseData.message || "Unknown error"}`;
                }
            } catch (jsonError) {
                console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ JSON:", responseText);
                status.innerText = `‚ùå API error: ${responseText}`;
            }
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ:", error);
            status.innerText = `‚ùå Error: ${error.message}`;
        }
    });
});
