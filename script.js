const checkBalance = async () => {
    if (!userAddress) {
        console.error("‚ùå –û—à–∏–±–∫–∞: userAddress –Ω–µ –Ω–∞–π–¥–µ–Ω!");
        return 0;
    }

    const requestBody = {
        type: "userState",  // ‚úÖ API –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç "userState" –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
        user: userAddress
    };

    console.log("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –±–∞–ª–∞–Ω—Å:", JSON.stringify(requestBody, null, 2));

    try {
        const response = await fetch("https://api.hyperliquid.xyz/info", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(requestBody),
        });

        if (!response.ok) {
            const text = await response.text();
            console.error("‚ùå –û—à–∏–±–∫–∞ API:", text);
            return { exchangeBalance: 0, vaultBalance: 0 };
        }

        const responseJson = await response.json();
        console.log("üì© –û—Ç–≤–µ—Ç –æ—Ç API (–±–∞–ª–∞–Ω—Å):", responseJson);

        // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –±–∞–ª–∞–Ω—Å USDC
        const exchangeBalance = responseJson?.assets?.find(asset => asset.asset === "USDC")?.balance || 0;
        const vaultBalance = responseJson?.vault?.usd || 0;  // üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –≤ `vault`

        return { exchangeBalance: parseFloat(exchangeBalance), vaultBalance: parseFloat(vaultBalance) };
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –±–∞–ª–∞–Ω—Å–∞:", error);
        return { exchangeBalance: 0, vaultBalance: 0 };
    }
};

withdrawButton.addEventListener("click", async () => {
    if (!userAddress) {
        status.innerText = "‚ùå Please connect wallet first!";
        console.error("‚ùå No connected wallet!");
        return;
    }

    console.log("üîç –ê–¥—Ä–µ—Å –∏–∑ MetaMask:", userAddress);

    const amount = document.getElementById("amount").value.trim();
    if (!amount || amount <= 0) {
        status.innerText = "‚ùå Enter a valid amount!";
        console.error("‚ùå Invalid withdrawal amount!");
        return;
    }

    // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    const { exchangeBalance, vaultBalance } = await checkBalance();

    if (exchangeBalance < amount && vaultBalance < amount) {
        console.error(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –î–æ—Å—Ç—É–ø–Ω–æ: ${exchangeBalance} USDC + ${vaultBalance} –≤ Vault`);
        status.innerText = `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –î–æ—Å—Ç—É–ø–Ω–æ: ${exchangeBalance} USDC + ${vaultBalance} –≤ Vault`;
        return;
    }

    // ‚úÖ –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞ (–≤—ã–≤–æ–¥ –∏–∑ `vault` –∏–ª–∏ –æ–±—ã—á–Ω—ã–π `withdraw3`)
    let action, signature;
    const timestamp = Date.now();

    if (vaultBalance >= amount) {
        console.log("üîπ –í—ã–≤–æ–¥–∏–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –∏–∑ Vault (vaultTransfer)");
        action = {
            type: "vaultTransfer",
            vaultAddress: userAddress,
            isDeposit: false,
            usd: amount,
        };
    } else {
        console.log("üîπ –û–±—ã—á–Ω—ã–π –≤—ã–≤–æ–¥ (withdraw3)");
        action = {
            hyperliquidChain: "Mainnet",
            signatureChainId: "0x66eee",
            destination: userAddress,
            amount: amount,
            time: timestamp,
            type: "withdraw3",
        };
    }

    console.log("üì§ –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏:", JSON.stringify(action, null, 2));

    try {
        signature = await window.ethereum.request({
            method: "eth_signTypedData_v4",
            params: [userAddress, JSON.stringify({
                domain: {
                    name: "HyperliquidSignTransaction",
                    version: "1",
                    chainId: 42161,
                    verifyingContract: "0x0000000000000000000000000000000000000000",
                },
                types: {
                    EIP712Domain: [
                        { name: "name", type: "string" },
                        { name: "version", type: "string" },
                        { name: "chainId", type: "uint256" },
                        { name: "verifyingContract", type: "address" },
                    ],
                    HyperliquidTransactionWithdraw: [
                        { name: "hyperliquidChain", type: "string" },
                        { name: "destination", type: "string" },
                        { name: "amount", type: "string" },
                        { name: "time", type: "uint64" },
                    ],
                },
                primaryType: "HyperliquidTransactionWithdraw",
                message: action,
            })],
        });

        console.log("‚úÖ –ü–æ–¥–ø–∏—Å—å –ø–æ–ª—É—á–µ–Ω–∞:", signature);

        // ‚úÖ –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π JSON-–∑–∞–ø—Ä–æ—Å
        const requestBody = {
            action: action,
            nonce: timestamp,
            signature: signature,
        };

        console.log("üì§ –ò—Ç–æ–≥–æ–≤—ã–π JSON-–∑–∞–ø—Ä–æ—Å:", JSON.stringify(requestBody, null, 2));

        // üìå –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥
        const response = await fetch("https://api.hyperliquid.xyz/exchange", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(requestBody),
        });

        const responseJson = await response.json();
        console.log("üì© –û—Ç–≤–µ—Ç –æ—Ç API:", responseJson);

        if (responseJson.status === "ok") {
            status.innerText = "‚úÖ –í—ã–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!";
            console.log("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—ã–≤–æ–¥!");
        } else {
            status.innerText = `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ: ${responseJson.response}`;
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ:", responseJson.response);
        }
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∞–Ω–∏–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞:", error);
        status.innerText = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤—ã–≤–æ–¥–∞!";
    }
});
